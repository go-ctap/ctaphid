// Code generated by "stringer -type=Command,StatusCode,CapabilityFlag,Error,KeepaliveStatusCode -output=consts_string.go"; DO NOT EDIT.

package ctaphid

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[CTAPHID_MSG-3]
	_ = x[CTAPHID_CBOR-16]
	_ = x[CTAPHID_INIT-6]
	_ = x[CTAPHID_PING-1]
	_ = x[CTAPHID_CANCEL-17]
	_ = x[CTAPHID_ERROR-63]
	_ = x[CTAPHID_KEEPALIVE-59]
	_ = x[CTAPHID_WINK-8]
	_ = x[CTAPHID_LOCK-4]
}

const (
	_Command_name_0 = "CTAPHID_PING"
	_Command_name_1 = "CTAPHID_MSGCTAPHID_LOCK"
	_Command_name_2 = "CTAPHID_INIT"
	_Command_name_3 = "CTAPHID_WINK"
	_Command_name_4 = "CTAPHID_CBORCTAPHID_CANCEL"
	_Command_name_5 = "CTAPHID_KEEPALIVE"
	_Command_name_6 = "CTAPHID_ERROR"
)

var (
	_Command_index_1 = [...]uint8{0, 11, 23}
	_Command_index_4 = [...]uint8{0, 12, 26}
)

func (i Command) String() string {
	switch {
	case i == 1:
		return _Command_name_0
	case 3 <= i && i <= 4:
		i -= 3
		return _Command_name_1[_Command_index_1[i]:_Command_index_1[i+1]]
	case i == 6:
		return _Command_name_2
	case i == 8:
		return _Command_name_3
	case 16 <= i && i <= 17:
		i -= 16
		return _Command_name_4[_Command_index_4[i]:_Command_index_4[i+1]]
	case i == 59:
		return _Command_name_5
	case i == 63:
		return _Command_name_6
	default:
		return "Command(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[CTAP2_OK-0]
	_ = x[CTAP1_ERR_INVALID_COMMAND-1]
	_ = x[CTAP1_ERR_INVALID_PARAMETER-2]
	_ = x[CTAP1_ERR_INVALID_LENGTH-3]
	_ = x[CTAP1_ERR_INVALID_SEQ-4]
	_ = x[CTAP1_ERR_TIMEOUT-5]
	_ = x[CTAP1_ERR_CHANNEL_BUSY-6]
	_ = x[CTAP1_ERR_LOCK_REQUIRED-10]
	_ = x[CTAP1_ERR_INVALID_CHANNEL-11]
	_ = x[CTAP2_ERR_CBOR_UNEXPECTED_TYPE-17]
	_ = x[CTAP2_ERR_INVALID_CBOR-18]
	_ = x[CTAP2_ERR_MISSING_PARAMETER-20]
	_ = x[CTAP2_ERR_LIMIT_EXCEEDED-21]
	_ = x[CTAP2_ERR_FP_DATABASE_FULL-23]
	_ = x[CTAP2_ERR_LARGE_BLOB_STORAGE_FULL-24]
	_ = x[CTAP2_ERR_CREDENTIAL_EXCLUDED-25]
	_ = x[CTAP2_ERR_PROCESSING-33]
	_ = x[CTAP2_ERR_INVALID_CREDENTIAL-34]
	_ = x[CTAP2_ERR_USER_ACTION_PENDING-35]
	_ = x[CTAP2_ERR_OPERATION_PENDING-36]
	_ = x[CTAP2_ERR_NO_OPERATIONS-37]
	_ = x[CTAP2_ERR_UNSUPPORTED_ALGORITHM-38]
	_ = x[CTAP2_ERR_OPERATION_DENIED-39]
	_ = x[CTAP2_ERR_KEY_STORE_FULL-40]
	_ = x[CTAP2_ERR_UNSUPPORTED_OPTION-43]
	_ = x[CTAP2_ERR_INVALID_OPTION-44]
	_ = x[CTAP2_ERR_KEEPALIVE_CANCEL-45]
	_ = x[CTAP2_ERR_NO_CREDENTIALS-46]
	_ = x[CTAP2_ERR_USER_ACTION_TIMEOUT-47]
	_ = x[CTAP2_ERR_NOT_ALLOWED-48]
	_ = x[CTAP2_ERR_PIN_INVALID-49]
	_ = x[CTAP2_ERR_PIN_BLOCKED-50]
	_ = x[CTAP2_ERR_PIN_AUTH_INVALID-51]
	_ = x[CTAP2_ERR_PIN_AUTH_BLOCKED-52]
	_ = x[CTAP2_ERR_PIN_NOT_SET-53]
	_ = x[CTAP2_ERR_PUAT_REQUIRED-54]
	_ = x[CTAP2_ERR_PIN_POLICY_VIOLATION-55]
	_ = x[RESERVED_FOR_FUTURE_USE-56]
	_ = x[CTAP2_ERR_REQUEST_TOO_LARGE-57]
	_ = x[CTAP2_ERR_ACTION_TIMEOUT-58]
	_ = x[CTAP2_ERR_UP_REQUIRED-59]
	_ = x[CTAP2_ERR_UV_BLOCKED-60]
	_ = x[CTAP2_ERR_INTEGRITY_FAILURE-61]
	_ = x[CTAP2_ERR_INVALID_SUBCOMMAND-62]
	_ = x[CTAP2_ERR_UV_INVALID-63]
	_ = x[CTAP2_ERR_UNAUTHORIZED_PERMISSION-64]
	_ = x[CTAP1_ERR_OTHER-127]
	_ = x[CTAP2_ERR_SPEC_LAST-223]
	_ = x[CTAP2_ERR_EXTENSION_FIRST-224]
	_ = x[CTAP2_ERR_EXTENSION_LAST-239]
	_ = x[CTAP2_ERR_VENDOR_FIRST-240]
	_ = x[CTAP2_ERR_VENDOR_LAST-255]
}

const _StatusCode_name = "CTAP2_OKCTAP1_ERR_INVALID_COMMANDCTAP1_ERR_INVALID_PARAMETERCTAP1_ERR_INVALID_LENGTHCTAP1_ERR_INVALID_SEQCTAP1_ERR_TIMEOUTCTAP1_ERR_CHANNEL_BUSYCTAP1_ERR_LOCK_REQUIREDCTAP1_ERR_INVALID_CHANNELCTAP2_ERR_CBOR_UNEXPECTED_TYPECTAP2_ERR_INVALID_CBORCTAP2_ERR_MISSING_PARAMETERCTAP2_ERR_LIMIT_EXCEEDEDCTAP2_ERR_FP_DATABASE_FULLCTAP2_ERR_LARGE_BLOB_STORAGE_FULLCTAP2_ERR_CREDENTIAL_EXCLUDEDCTAP2_ERR_PROCESSINGCTAP2_ERR_INVALID_CREDENTIALCTAP2_ERR_USER_ACTION_PENDINGCTAP2_ERR_OPERATION_PENDINGCTAP2_ERR_NO_OPERATIONSCTAP2_ERR_UNSUPPORTED_ALGORITHMCTAP2_ERR_OPERATION_DENIEDCTAP2_ERR_KEY_STORE_FULLCTAP2_ERR_UNSUPPORTED_OPTIONCTAP2_ERR_INVALID_OPTIONCTAP2_ERR_KEEPALIVE_CANCELCTAP2_ERR_NO_CREDENTIALSCTAP2_ERR_USER_ACTION_TIMEOUTCTAP2_ERR_NOT_ALLOWEDCTAP2_ERR_PIN_INVALIDCTAP2_ERR_PIN_BLOCKEDCTAP2_ERR_PIN_AUTH_INVALIDCTAP2_ERR_PIN_AUTH_BLOCKEDCTAP2_ERR_PIN_NOT_SETCTAP2_ERR_PUAT_REQUIREDCTAP2_ERR_PIN_POLICY_VIOLATIONRESERVED_FOR_FUTURE_USECTAP2_ERR_REQUEST_TOO_LARGECTAP2_ERR_ACTION_TIMEOUTCTAP2_ERR_UP_REQUIREDCTAP2_ERR_UV_BLOCKEDCTAP2_ERR_INTEGRITY_FAILURECTAP2_ERR_INVALID_SUBCOMMANDCTAP2_ERR_UV_INVALIDCTAP2_ERR_UNAUTHORIZED_PERMISSIONCTAP1_ERR_OTHERCTAP2_ERR_SPEC_LASTCTAP2_ERR_EXTENSION_FIRSTCTAP2_ERR_EXTENSION_LASTCTAP2_ERR_VENDOR_FIRSTCTAP2_ERR_VENDOR_LAST"

var _StatusCode_map = map[StatusCode]string{
	0:   _StatusCode_name[0:8],
	1:   _StatusCode_name[8:33],
	2:   _StatusCode_name[33:60],
	3:   _StatusCode_name[60:84],
	4:   _StatusCode_name[84:105],
	5:   _StatusCode_name[105:122],
	6:   _StatusCode_name[122:144],
	10:  _StatusCode_name[144:167],
	11:  _StatusCode_name[167:192],
	17:  _StatusCode_name[192:222],
	18:  _StatusCode_name[222:244],
	20:  _StatusCode_name[244:271],
	21:  _StatusCode_name[271:295],
	23:  _StatusCode_name[295:321],
	24:  _StatusCode_name[321:354],
	25:  _StatusCode_name[354:383],
	33:  _StatusCode_name[383:403],
	34:  _StatusCode_name[403:431],
	35:  _StatusCode_name[431:460],
	36:  _StatusCode_name[460:487],
	37:  _StatusCode_name[487:510],
	38:  _StatusCode_name[510:541],
	39:  _StatusCode_name[541:567],
	40:  _StatusCode_name[567:591],
	43:  _StatusCode_name[591:619],
	44:  _StatusCode_name[619:643],
	45:  _StatusCode_name[643:669],
	46:  _StatusCode_name[669:693],
	47:  _StatusCode_name[693:722],
	48:  _StatusCode_name[722:743],
	49:  _StatusCode_name[743:764],
	50:  _StatusCode_name[764:785],
	51:  _StatusCode_name[785:811],
	52:  _StatusCode_name[811:837],
	53:  _StatusCode_name[837:858],
	54:  _StatusCode_name[858:881],
	55:  _StatusCode_name[881:911],
	56:  _StatusCode_name[911:934],
	57:  _StatusCode_name[934:961],
	58:  _StatusCode_name[961:985],
	59:  _StatusCode_name[985:1006],
	60:  _StatusCode_name[1006:1026],
	61:  _StatusCode_name[1026:1053],
	62:  _StatusCode_name[1053:1081],
	63:  _StatusCode_name[1081:1101],
	64:  _StatusCode_name[1101:1134],
	127: _StatusCode_name[1134:1149],
	223: _StatusCode_name[1149:1168],
	224: _StatusCode_name[1168:1193],
	239: _StatusCode_name[1193:1217],
	240: _StatusCode_name[1217:1239],
	255: _StatusCode_name[1239:1260],
}

func (i StatusCode) String() string {
	if str, ok := _StatusCode_map[i]; ok {
		return str
	}
	return "StatusCode(" + strconv.FormatInt(int64(i), 10) + ")"
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[CAPABILITY_WINK-1]
	_ = x[CAPABILITY_CBOR-4]
	_ = x[CAPABILITY_NMSG-8]
}

const (
	_CapabilityFlag_name_0 = "CAPABILITY_WINK"
	_CapabilityFlag_name_1 = "CAPABILITY_CBOR"
	_CapabilityFlag_name_2 = "CAPABILITY_NMSG"
)

func (i CapabilityFlag) String() string {
	switch {
	case i == 1:
		return _CapabilityFlag_name_0
	case i == 4:
		return _CapabilityFlag_name_1
	case i == 8:
		return _CapabilityFlag_name_2
	default:
		return "CapabilityFlag(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[ERR_INVALID_CMD-1]
	_ = x[ERR_INVALID_PAR-2]
	_ = x[ERR_INVALID_LEN-3]
	_ = x[ERR_INVALID_SEQ-4]
	_ = x[ERR_MSG_TIMEOUT-5]
	_ = x[ERR_CHANNEL_BUSY-6]
	_ = x[ERR_LOCK_REQUIRED-10]
	_ = x[ERR_INVALID_CHANNEL-11]
	_ = x[ERR_OTHER-127]
}

const (
	_Error_name_0 = "ERR_INVALID_CMDERR_INVALID_PARERR_INVALID_LENERR_INVALID_SEQERR_MSG_TIMEOUTERR_CHANNEL_BUSY"
	_Error_name_1 = "ERR_LOCK_REQUIREDERR_INVALID_CHANNEL"
	_Error_name_2 = "ERR_OTHER"
)

var (
	_Error_index_0 = [...]uint8{0, 15, 30, 45, 60, 75, 91}
	_Error_index_1 = [...]uint8{0, 17, 36}
)

func (i Error) String() string {
	switch {
	case 1 <= i && i <= 6:
		i -= 1
		return _Error_name_0[_Error_index_0[i]:_Error_index_0[i+1]]
	case 10 <= i && i <= 11:
		i -= 10
		return _Error_name_1[_Error_index_1[i]:_Error_index_1[i+1]]
	case i == 127:
		return _Error_name_2
	default:
		return "Error(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[STATUS_PROCESSING-1]
	_ = x[STATUS_UPNEEDED-2]
}

const _KeepaliveStatusCode_name = "STATUS_PROCESSINGSTATUS_UPNEEDED"

var _KeepaliveStatusCode_index = [...]uint8{0, 17, 32}

func (i KeepaliveStatusCode) String() string {
	i -= 1
	if i >= KeepaliveStatusCode(len(_KeepaliveStatusCode_index)-1) {
		return "KeepaliveStatusCode(" + strconv.FormatInt(int64(i+1), 10) + ")"
	}
	return _KeepaliveStatusCode_name[_KeepaliveStatusCode_index[i]:_KeepaliveStatusCode_index[i+1]]
}
