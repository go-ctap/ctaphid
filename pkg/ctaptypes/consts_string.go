// Code generated by "stringer -type=Command,ClientPINSubCommand,BioEnrollmentSubCommand,LastEnrollSampleStatus,CredentialManagementSubCommand,ConfigSubCommand,Permission -output=consts_string.go"; DO NOT EDIT.

package ctaptypes

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[AuthenticatorMakeCredential-1]
	_ = x[AuthenticatorGetAssertion-2]
	_ = x[AuthenticatorGetNextAssertion-8]
	_ = x[AuthenticatorGetInfo-4]
	_ = x[AuthenticatorClientPIN-6]
	_ = x[AuthenticatorReset-7]
	_ = x[AuthenticatorBioEnrollment-9]
	_ = x[AuthenticatorCredentialManagement-10]
	_ = x[AuthenticatorSelection-11]
	_ = x[AuthenticatorLargeBlobs-12]
	_ = x[AuthenticatorConfig-13]
	_ = x[PrototypeAuthenticatorBioEnrollment-64]
	_ = x[PrototypeAuthenticatorCredentialManagement-65]
}

const (
	_Command_name_0 = "AuthenticatorMakeCredentialAuthenticatorGetAssertion"
	_Command_name_1 = "AuthenticatorGetInfo"
	_Command_name_2 = "AuthenticatorClientPINAuthenticatorResetAuthenticatorGetNextAssertionAuthenticatorBioEnrollmentAuthenticatorCredentialManagementAuthenticatorSelectionAuthenticatorLargeBlobsAuthenticatorConfig"
	_Command_name_3 = "PrototypeAuthenticatorBioEnrollmentPrototypeAuthenticatorCredentialManagement"
)

var (
	_Command_index_0 = [...]uint8{0, 27, 52}
	_Command_index_2 = [...]uint8{0, 22, 40, 69, 95, 128, 150, 173, 192}
	_Command_index_3 = [...]uint8{0, 35, 77}
)

func (i Command) String() string {
	switch {
	case 1 <= i && i <= 2:
		i -= 1
		return _Command_name_0[_Command_index_0[i]:_Command_index_0[i+1]]
	case i == 4:
		return _Command_name_1
	case 6 <= i && i <= 13:
		i -= 6
		return _Command_name_2[_Command_index_2[i]:_Command_index_2[i+1]]
	case 64 <= i && i <= 65:
		i -= 64
		return _Command_name_3[_Command_index_3[i]:_Command_index_3[i+1]]
	default:
		return "Command(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[ClientPINSubCommandGetPINRetries-1]
	_ = x[ClientPINSubCommandGetKeyAgreement-2]
	_ = x[ClientPINSubCommandSetPIN-3]
	_ = x[ClientPINSubCommandChangePIN-4]
	_ = x[ClientPINSubCommandGetPinToken-5]
	_ = x[ClientPINSubCommandGetPinUvAuthTokenUsingUvWithPermissions-6]
	_ = x[ClientPINSubCommandGetUVRetries-7]
	_ = x[ClientPINSubCommandGetPinUvAuthTokenUsingPinWithPermissions-9]
}

const (
	_ClientPINSubCommand_name_0 = "ClientPINSubCommandGetPINRetriesClientPINSubCommandGetKeyAgreementClientPINSubCommandSetPINClientPINSubCommandChangePINClientPINSubCommandGetPinTokenClientPINSubCommandGetPinUvAuthTokenUsingUvWithPermissionsClientPINSubCommandGetUVRetries"
	_ClientPINSubCommand_name_1 = "ClientPINSubCommandGetPinUvAuthTokenUsingPinWithPermissions"
)

var (
	_ClientPINSubCommand_index_0 = [...]uint8{0, 32, 66, 91, 119, 149, 207, 238}
)

func (i ClientPINSubCommand) String() string {
	switch {
	case 1 <= i && i <= 7:
		i -= 1
		return _ClientPINSubCommand_name_0[_ClientPINSubCommand_index_0[i]:_ClientPINSubCommand_index_0[i+1]]
	case i == 9:
		return _ClientPINSubCommand_name_1
	default:
		return "ClientPINSubCommand(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[BioEnrollmentSubCommandEnrollBegin-1]
	_ = x[BioEnrollmentSubCommandEnrollCaptureNextSample-2]
	_ = x[BioEnrollmentSubCommandCancelCurrentEnrollment-3]
	_ = x[BioEnrollmentSubCommandEnumerateEnrollments-4]
	_ = x[BioEnrollmentSubCommandSetFriendlyName-5]
	_ = x[BioEnrollmentSubCommandRemoveEnrollment-6]
	_ = x[BioEnrollmentSubCommandGetFingerprintSensorInfo-7]
}

const _BioEnrollmentSubCommand_name = "BioEnrollmentSubCommandEnrollBeginBioEnrollmentSubCommandEnrollCaptureNextSampleBioEnrollmentSubCommandCancelCurrentEnrollmentBioEnrollmentSubCommandEnumerateEnrollmentsBioEnrollmentSubCommandSetFriendlyNameBioEnrollmentSubCommandRemoveEnrollmentBioEnrollmentSubCommandGetFingerprintSensorInfo"

var _BioEnrollmentSubCommand_index = [...]uint16{0, 34, 80, 126, 169, 207, 246, 293}

func (i BioEnrollmentSubCommand) String() string {
	i -= 1
	if i >= BioEnrollmentSubCommand(len(_BioEnrollmentSubCommand_index)-1) {
		return "BioEnrollmentSubCommand(" + strconv.FormatInt(int64(i+1), 10) + ")"
	}
	return _BioEnrollmentSubCommand_name[_BioEnrollmentSubCommand_index[i]:_BioEnrollmentSubCommand_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[LastEnrollSampleStatusFingerprintGood-0]
	_ = x[LastEnrollSampleStatusFingerprintTooHigh-1]
	_ = x[LastEnrollSampleStatusFingerprintTooLow-2]
	_ = x[LastEnrollSampleStatusFingerprintTooLeft-3]
	_ = x[LastEnrollSampleStatusFingerprintTooRight-4]
	_ = x[LastEnrollSampleStatusFingerprintTooFast-5]
	_ = x[LastEnrollSampleStatusFingerprintTooSlow-6]
	_ = x[LastEnrollSampleStatusFingerprintPoorQuality-7]
	_ = x[LastEnrollSampleStatusFingerprintTooSkewed-8]
	_ = x[LastEnrollSampleStatusFingerprintTooShort-9]
	_ = x[LastEnrollSampleStatusFingerprintMergeFailure-10]
	_ = x[LastEnrollSampleStatusFingerprintExists-11]
	_ = x[LastEnrollSampleStatusNoUserActivity-13]
	_ = x[LastEnrollSampleStatusNoUserPresenceTransition-14]
}

const (
	_LastEnrollSampleStatus_name_0 = "LastEnrollSampleStatusFingerprintGoodLastEnrollSampleStatusFingerprintTooHighLastEnrollSampleStatusFingerprintTooLowLastEnrollSampleStatusFingerprintTooLeftLastEnrollSampleStatusFingerprintTooRightLastEnrollSampleStatusFingerprintTooFastLastEnrollSampleStatusFingerprintTooSlowLastEnrollSampleStatusFingerprintPoorQualityLastEnrollSampleStatusFingerprintTooSkewedLastEnrollSampleStatusFingerprintTooShortLastEnrollSampleStatusFingerprintMergeFailureLastEnrollSampleStatusFingerprintExists"
	_LastEnrollSampleStatus_name_1 = "LastEnrollSampleStatusNoUserActivityLastEnrollSampleStatusNoUserPresenceTransition"
)

var (
	_LastEnrollSampleStatus_index_0 = [...]uint16{0, 37, 77, 116, 156, 197, 237, 277, 321, 363, 404, 449, 488}
	_LastEnrollSampleStatus_index_1 = [...]uint8{0, 36, 82}
)

func (i LastEnrollSampleStatus) String() string {
	switch {
	case i <= 11:
		return _LastEnrollSampleStatus_name_0[_LastEnrollSampleStatus_index_0[i]:_LastEnrollSampleStatus_index_0[i+1]]
	case 13 <= i && i <= 14:
		i -= 13
		return _LastEnrollSampleStatus_name_1[_LastEnrollSampleStatus_index_1[i]:_LastEnrollSampleStatus_index_1[i+1]]
	default:
		return "LastEnrollSampleStatus(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[CredentialManagementSubCommandGetCredsMetadata-1]
	_ = x[CredentialManagementSubCommandEnumerateRPsBegin-2]
	_ = x[CredentialManagementSubCommandEnumerateRPsGetNextRP-3]
	_ = x[CredentialManagementSubCommandEnumerateCredentialsBegin-4]
	_ = x[CredentialManagementSubCommandEnumerateCredentialsGetNextCredential-5]
	_ = x[CredentialManagementSubCommandDeleteCredential-6]
	_ = x[CredentialManagementSubCommandUpdateUserInformation-7]
}

const _CredentialManagementSubCommand_name = "CredentialManagementSubCommandGetCredsMetadataCredentialManagementSubCommandEnumerateRPsBeginCredentialManagementSubCommandEnumerateRPsGetNextRPCredentialManagementSubCommandEnumerateCredentialsBeginCredentialManagementSubCommandEnumerateCredentialsGetNextCredentialCredentialManagementSubCommandDeleteCredentialCredentialManagementSubCommandUpdateUserInformation"

var _CredentialManagementSubCommand_index = [...]uint16{0, 46, 93, 144, 199, 266, 312, 363}

func (i CredentialManagementSubCommand) String() string {
	i -= 1
	if i >= CredentialManagementSubCommand(len(_CredentialManagementSubCommand_index)-1) {
		return "CredentialManagementSubCommand(" + strconv.FormatInt(int64(i+1), 10) + ")"
	}
	return _CredentialManagementSubCommand_name[_CredentialManagementSubCommand_index[i]:_CredentialManagementSubCommand_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[ConfigSubCommandEnableEnterpriseAttestation-1]
	_ = x[ConfigSubCommandToggleAlwaysUv-2]
	_ = x[ConfigSubCommandSetMinPINLength-3]
}

const _ConfigSubCommand_name = "ConfigSubCommandEnableEnterpriseAttestationConfigSubCommandToggleAlwaysUvConfigSubCommandSetMinPINLength"

var _ConfigSubCommand_index = [...]uint8{0, 43, 73, 104}

func (i ConfigSubCommand) String() string {
	i -= 1
	if i >= ConfigSubCommand(len(_ConfigSubCommand_index)-1) {
		return "ConfigSubCommand(" + strconv.FormatInt(int64(i+1), 10) + ")"
	}
	return _ConfigSubCommand_name[_ConfigSubCommand_index[i]:_ConfigSubCommand_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[PermissionNone-0]
	_ = x[PermissionMakeCredential-1]
	_ = x[PermissionGetAssertion-2]
	_ = x[PermissionCredentialManagement-4]
	_ = x[PermissionBioEnrollment-8]
	_ = x[PermissionLargeBlobWrite-16]
	_ = x[PermissionAuthenticatorConfiguration-32]
	_ = x[PermissionPersistentCredentialManagementReadOnly-64]
}

const (
	_Permission_name_0 = "PermissionNonePermissionMakeCredentialPermissionGetAssertion"
	_Permission_name_1 = "PermissionCredentialManagement"
	_Permission_name_2 = "PermissionBioEnrollment"
	_Permission_name_3 = "PermissionLargeBlobWrite"
	_Permission_name_4 = "PermissionAuthenticatorConfiguration"
	_Permission_name_5 = "PermissionPersistentCredentialManagementReadOnly"
)

var (
	_Permission_index_0 = [...]uint8{0, 14, 38, 60}
)

func (i Permission) String() string {
	switch {
	case i <= 2:
		return _Permission_name_0[_Permission_index_0[i]:_Permission_index_0[i+1]]
	case i == 4:
		return _Permission_name_1
	case i == 8:
		return _Permission_name_2
	case i == 16:
		return _Permission_name_3
	case i == 32:
		return _Permission_name_4
	case i == 64:
		return _Permission_name_5
	default:
		return "Permission(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
